syntax = "proto3";

option go_package = "./friends-proto";

//Service for friends
service FriendsService {
  //Add friends method
  rpc SetFriends(SetFriendsIn) returns (SetFriendsOut){};
  rpc GetPeerFollow(GetPeerFollowIn) returns (GetPeerFollowOut){};
  rpc GetWhoFollowPeer(GetWhoFollowPeerIn) returns (GetWhoFollowPeerOut){};
  rpc RemoveSubscribe(RemoveSubscribeIn) returns (RemoveSubscribeOut){};
  rpc SetInvitePeer(SetInvitePeerIn) returns (SetInvitePeerOut){};
  rpc RemoveFriends(RemoveFriendsIn) returns (RemoveFriendsOut){};
  rpc GetCountFriends(EmptyFriends) returns (GetCountFriendsOut){};
  rpc IsFriendExist (IsFriendExistIn) returns (IsFriendExistOut){};
}

message EmptyFriends {}

message RemoveFriendsIn{
  string peer = 1;
}

message RemoveFriendsOut{
  bool success = 1;
}

message SetFriendsIn {
  string peer = 1;
}

message SetFriendsOut {
  bool success = 1;
}

message Peer {
  //Peer uuid
  string uuid = 1;
}

message RemoveSubscribeIn {
    string peer = 1;
}

message RemoveSubscribeOut{
}

message SetInvitePeerIn{
    string email = 1;
}

message SetInvitePeerOut{
}

message GetPeerFollowOut {
  repeated Peer subscription = 1;
}

//Response subscribers
message GetWhoFollowPeerOut {
  //Result of the operation
  repeated Peer subscribers = 1;
}
//Request for subscription
message GetPeerFollowIn {
  //Peer uuid
  string uuid = 1;
}
//Request for subscribers
message GetWhoFollowPeerIn {
  //Peer uuid
  string uuid = 1;
}

message GetCountFriendsOut {
  int64 subscription = 1;
  int64 subscribers = 2;
}

message IsFriendExistIn {
  string peer = 1;
}

message IsFriendExistOut {
  bool success = 1;
}
