// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: friends.proto

package friends_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriendsServiceClient is the client API for FriendsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendsServiceClient interface {
	// Add friends method
	SetFriends(ctx context.Context, in *SetFriendsIn, opts ...grpc.CallOption) (*SetFriendsOut, error)
	GetPeerFollow(ctx context.Context, in *GetPeerFollowIn, opts ...grpc.CallOption) (*GetPeerFollowOut, error)
	GetWhoFollowPeer(ctx context.Context, in *GetWhoFollowPeerIn, opts ...grpc.CallOption) (*GetWhoFollowPeerOut, error)
	RemoveSubscribe(ctx context.Context, in *RemoveSubscribeIn, opts ...grpc.CallOption) (*RemoveSubscribeOut, error)
	SetInvitePeer(ctx context.Context, in *SetInvitePeerIn, opts ...grpc.CallOption) (*SetInvitePeerOut, error)
	RemoveFriends(ctx context.Context, in *RemoveFriendsIn, opts ...grpc.CallOption) (*RemoveFriendsOut, error)
	GetCountFriends(ctx context.Context, in *EmptyFriends, opts ...grpc.CallOption) (*GetCountFriendsOut, error)
	IsFriendExist(ctx context.Context, in *IsFriendExistIn, opts ...grpc.CallOption) (*IsFriendExistOut, error)
}

type friendsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendsServiceClient(cc grpc.ClientConnInterface) FriendsServiceClient {
	return &friendsServiceClient{cc}
}

func (c *friendsServiceClient) SetFriends(ctx context.Context, in *SetFriendsIn, opts ...grpc.CallOption) (*SetFriendsOut, error) {
	out := new(SetFriendsOut)
	err := c.cc.Invoke(ctx, "/FriendsService/SetFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) GetPeerFollow(ctx context.Context, in *GetPeerFollowIn, opts ...grpc.CallOption) (*GetPeerFollowOut, error) {
	out := new(GetPeerFollowOut)
	err := c.cc.Invoke(ctx, "/FriendsService/GetPeerFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) GetWhoFollowPeer(ctx context.Context, in *GetWhoFollowPeerIn, opts ...grpc.CallOption) (*GetWhoFollowPeerOut, error) {
	out := new(GetWhoFollowPeerOut)
	err := c.cc.Invoke(ctx, "/FriendsService/GetWhoFollowPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) RemoveSubscribe(ctx context.Context, in *RemoveSubscribeIn, opts ...grpc.CallOption) (*RemoveSubscribeOut, error) {
	out := new(RemoveSubscribeOut)
	err := c.cc.Invoke(ctx, "/FriendsService/RemoveSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) SetInvitePeer(ctx context.Context, in *SetInvitePeerIn, opts ...grpc.CallOption) (*SetInvitePeerOut, error) {
	out := new(SetInvitePeerOut)
	err := c.cc.Invoke(ctx, "/FriendsService/SetInvitePeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) RemoveFriends(ctx context.Context, in *RemoveFriendsIn, opts ...grpc.CallOption) (*RemoveFriendsOut, error) {
	out := new(RemoveFriendsOut)
	err := c.cc.Invoke(ctx, "/FriendsService/RemoveFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) GetCountFriends(ctx context.Context, in *EmptyFriends, opts ...grpc.CallOption) (*GetCountFriendsOut, error) {
	out := new(GetCountFriendsOut)
	err := c.cc.Invoke(ctx, "/FriendsService/GetCountFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiceClient) IsFriendExist(ctx context.Context, in *IsFriendExistIn, opts ...grpc.CallOption) (*IsFriendExistOut, error) {
	out := new(IsFriendExistOut)
	err := c.cc.Invoke(ctx, "/FriendsService/IsFriendExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendsServiceServer is the server API for FriendsService service.
// All implementations must embed UnimplementedFriendsServiceServer
// for forward compatibility
type FriendsServiceServer interface {
	// Add friends method
	SetFriends(context.Context, *SetFriendsIn) (*SetFriendsOut, error)
	GetPeerFollow(context.Context, *GetPeerFollowIn) (*GetPeerFollowOut, error)
	GetWhoFollowPeer(context.Context, *GetWhoFollowPeerIn) (*GetWhoFollowPeerOut, error)
	RemoveSubscribe(context.Context, *RemoveSubscribeIn) (*RemoveSubscribeOut, error)
	SetInvitePeer(context.Context, *SetInvitePeerIn) (*SetInvitePeerOut, error)
	RemoveFriends(context.Context, *RemoveFriendsIn) (*RemoveFriendsOut, error)
	GetCountFriends(context.Context, *EmptyFriends) (*GetCountFriendsOut, error)
	IsFriendExist(context.Context, *IsFriendExistIn) (*IsFriendExistOut, error)
	mustEmbedUnimplementedFriendsServiceServer()
}

// UnimplementedFriendsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFriendsServiceServer struct {
}

func (UnimplementedFriendsServiceServer) SetFriends(context.Context, *SetFriendsIn) (*SetFriendsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFriends not implemented")
}
func (UnimplementedFriendsServiceServer) GetPeerFollow(context.Context, *GetPeerFollowIn) (*GetPeerFollowOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerFollow not implemented")
}
func (UnimplementedFriendsServiceServer) GetWhoFollowPeer(context.Context, *GetWhoFollowPeerIn) (*GetWhoFollowPeerOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhoFollowPeer not implemented")
}
func (UnimplementedFriendsServiceServer) RemoveSubscribe(context.Context, *RemoveSubscribeIn) (*RemoveSubscribeOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubscribe not implemented")
}
func (UnimplementedFriendsServiceServer) SetInvitePeer(context.Context, *SetInvitePeerIn) (*SetInvitePeerOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInvitePeer not implemented")
}
func (UnimplementedFriendsServiceServer) RemoveFriends(context.Context, *RemoveFriendsIn) (*RemoveFriendsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFriends not implemented")
}
func (UnimplementedFriendsServiceServer) GetCountFriends(context.Context, *EmptyFriends) (*GetCountFriendsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountFriends not implemented")
}
func (UnimplementedFriendsServiceServer) IsFriendExist(context.Context, *IsFriendExistIn) (*IsFriendExistOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFriendExist not implemented")
}
func (UnimplementedFriendsServiceServer) mustEmbedUnimplementedFriendsServiceServer() {}

// UnsafeFriendsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendsServiceServer will
// result in compilation errors.
type UnsafeFriendsServiceServer interface {
	mustEmbedUnimplementedFriendsServiceServer()
}

func RegisterFriendsServiceServer(s grpc.ServiceRegistrar, srv FriendsServiceServer) {
	s.RegisterService(&FriendsService_ServiceDesc, srv)
}

func _FriendsService_SetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFriendsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).SetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendsService/SetFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).SetFriends(ctx, req.(*SetFriendsIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_GetPeerFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerFollowIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).GetPeerFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendsService/GetPeerFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).GetPeerFollow(ctx, req.(*GetPeerFollowIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_GetWhoFollowPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWhoFollowPeerIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).GetWhoFollowPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendsService/GetWhoFollowPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).GetWhoFollowPeer(ctx, req.(*GetWhoFollowPeerIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_RemoveSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubscribeIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).RemoveSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendsService/RemoveSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).RemoveSubscribe(ctx, req.(*RemoveSubscribeIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_SetInvitePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInvitePeerIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).SetInvitePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendsService/SetInvitePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).SetInvitePeer(ctx, req.(*SetInvitePeerIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_RemoveFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFriendsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).RemoveFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendsService/RemoveFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).RemoveFriends(ctx, req.(*RemoveFriendsIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_GetCountFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyFriends)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).GetCountFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendsService/GetCountFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).GetCountFriends(ctx, req.(*EmptyFriends))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsService_IsFriendExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFriendExistIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiceServer).IsFriendExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendsService/IsFriendExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiceServer).IsFriendExist(ctx, req.(*IsFriendExistIn))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendsService_ServiceDesc is the grpc.ServiceDesc for FriendsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FriendsService",
	HandlerType: (*FriendsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetFriends",
			Handler:    _FriendsService_SetFriends_Handler,
		},
		{
			MethodName: "GetPeerFollow",
			Handler:    _FriendsService_GetPeerFollow_Handler,
		},
		{
			MethodName: "GetWhoFollowPeer",
			Handler:    _FriendsService_GetWhoFollowPeer_Handler,
		},
		{
			MethodName: "RemoveSubscribe",
			Handler:    _FriendsService_RemoveSubscribe_Handler,
		},
		{
			MethodName: "SetInvitePeer",
			Handler:    _FriendsService_SetInvitePeer_Handler,
		},
		{
			MethodName: "RemoveFriends",
			Handler:    _FriendsService_RemoveFriends_Handler,
		},
		{
			MethodName: "GetCountFriends",
			Handler:    _FriendsService_GetCountFriends_Handler,
		},
		{
			MethodName: "IsFriendExist",
			Handler:    _FriendsService_IsFriendExist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "friends.proto",
}
