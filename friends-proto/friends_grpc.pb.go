// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: friends.proto

package friends_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FriendsServise_SetFriends_FullMethodName = "/FriendsServise/SetFriends"
)

// FriendsServiseClient is the client API for FriendsServise service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for friends
type FriendsServiseClient interface {
	// Add friends method
	SetFriends(ctx context.Context, in *SetFriendsRequest, opts ...grpc.CallOption) (*SetFriendsResponse, error)
}

type friendsServiseClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendsServiseClient(cc grpc.ClientConnInterface) FriendsServiseClient {
	return &friendsServiseClient{cc}
}

func (c *friendsServiseClient) SetFriends(ctx context.Context, in *SetFriendsRequest, opts ...grpc.CallOption) (*SetFriendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetFriendsResponse)
	err := c.cc.Invoke(ctx, FriendsServise_SetFriends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendsServiseServer is the server API for FriendsServise service.
// All implementations must embed UnimplementedFriendsServiseServer
// for forward compatibility
//
// Service for friends
type FriendsServiseServer interface {
	// Add friends method
	SetFriends(context.Context, *SetFriendsRequest) (*SetFriendsResponse, error)
	mustEmbedUnimplementedFriendsServiseServer()
}

// UnimplementedFriendsServiseServer must be embedded to have forward compatible implementations.
type UnimplementedFriendsServiseServer struct {
}

func (UnimplementedFriendsServiseServer) SetFriends(context.Context, *SetFriendsRequest) (*SetFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFriends not implemented")
}
func (UnimplementedFriendsServiseServer) mustEmbedUnimplementedFriendsServiseServer() {}

// UnsafeFriendsServiseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendsServiseServer will
// result in compilation errors.
type UnsafeFriendsServiseServer interface {
	mustEmbedUnimplementedFriendsServiseServer()
}

func RegisterFriendsServiseServer(s grpc.ServiceRegistrar, srv FriendsServiseServer) {
	s.RegisterService(&FriendsServise_ServiceDesc, srv)
}

func _FriendsServise_SetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiseServer).SetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendsServise_SetFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiseServer).SetFriends(ctx, req.(*SetFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendsServise_ServiceDesc is the grpc.ServiceDesc for FriendsServise service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendsServise_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FriendsServise",
	HandlerType: (*FriendsServiseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetFriends",
			Handler:    _FriendsServise_SetFriends_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "friends.proto",
}
