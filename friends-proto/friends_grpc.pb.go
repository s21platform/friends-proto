// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: friends.proto

package friends_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriendsServiseClient is the client API for FriendsServise service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendsServiseClient interface {
	// Add friends method
	SetFriends(ctx context.Context, in *SetFriendsIn, opts ...grpc.CallOption) (*SetFriendsOut, error)
	GetPeerFollow(ctx context.Context, in *GetPeerFollowIn, opts ...grpc.CallOption) (*GetPeerFollowOut, error)
	GetWhoFollowPeer(ctx context.Context, in *GetWhoFollowPeerIn, opts ...grpc.CallOption) (*GetWhoFollowPeerOut, error)
}

type friendsServiseClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendsServiseClient(cc grpc.ClientConnInterface) FriendsServiseClient {
	return &friendsServiseClient{cc}
}

func (c *friendsServiseClient) SetFriends(ctx context.Context, in *SetFriendsIn, opts ...grpc.CallOption) (*SetFriendsOut, error) {
	out := new(SetFriendsOut)
	err := c.cc.Invoke(ctx, "/FriendsServise/SetFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiseClient) GetPeerFollow(ctx context.Context, in *GetPeerFollowIn, opts ...grpc.CallOption) (*GetPeerFollowOut, error) {
	out := new(GetPeerFollowOut)
	err := c.cc.Invoke(ctx, "/FriendsServise/GetPeerFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendsServiseClient) GetWhoFollowPeer(ctx context.Context, in *GetWhoFollowPeerIn, opts ...grpc.CallOption) (*GetWhoFollowPeerOut, error) {
	out := new(GetWhoFollowPeerOut)
	err := c.cc.Invoke(ctx, "/FriendsServise/GetWhoFollowPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendsServiseServer is the server API for FriendsServise service.
// All implementations must embed UnimplementedFriendsServiseServer
// for forward compatibility
type FriendsServiseServer interface {
	// Add friends method
	SetFriends(context.Context, *SetFriendsIn) (*SetFriendsOut, error)
	GetPeerFollow(context.Context, *GetPeerFollowIn) (*GetPeerFollowOut, error)
	GetWhoFollowPeer(context.Context, *GetWhoFollowPeerIn) (*GetWhoFollowPeerOut, error)
	mustEmbedUnimplementedFriendsServiseServer()
}

// UnimplementedFriendsServiseServer must be embedded to have forward compatible implementations.
type UnimplementedFriendsServiseServer struct {
}

func (UnimplementedFriendsServiseServer) SetFriends(context.Context, *SetFriendsIn) (*SetFriendsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFriends not implemented")
}
func (UnimplementedFriendsServiseServer) GetPeerFollow(context.Context, *GetPeerFollowIn) (*GetPeerFollowOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerFollow not implemented")
}
func (UnimplementedFriendsServiseServer) GetWhoFollowPeer(context.Context, *GetWhoFollowPeerIn) (*GetWhoFollowPeerOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhoFollowPeer not implemented")
}
func (UnimplementedFriendsServiseServer) mustEmbedUnimplementedFriendsServiseServer() {}

// UnsafeFriendsServiseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendsServiseServer will
// result in compilation errors.
type UnsafeFriendsServiseServer interface {
	mustEmbedUnimplementedFriendsServiseServer()
}

func RegisterFriendsServiseServer(s grpc.ServiceRegistrar, srv FriendsServiseServer) {
	s.RegisterService(&FriendsServise_ServiceDesc, srv)
}

func _FriendsServise_SetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFriendsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiseServer).SetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendsServise/SetFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiseServer).SetFriends(ctx, req.(*SetFriendsIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsServise_GetPeerFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerFollowIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiseServer).GetPeerFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendsServise/GetPeerFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiseServer).GetPeerFollow(ctx, req.(*GetPeerFollowIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendsServise_GetWhoFollowPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWhoFollowPeerIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendsServiseServer).GetWhoFollowPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FriendsServise/GetWhoFollowPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendsServiseServer).GetWhoFollowPeer(ctx, req.(*GetWhoFollowPeerIn))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendsServise_ServiceDesc is the grpc.ServiceDesc for FriendsServise service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendsServise_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FriendsServise",
	HandlerType: (*FriendsServiseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetFriends",
			Handler:    _FriendsServise_SetFriends_Handler,
		},
		{
			MethodName: "GetPeerFollow",
			Handler:    _FriendsServise_GetPeerFollow_Handler,
		},
		{
			MethodName: "GetWhoFollowPeer",
			Handler:    _FriendsServise_GetWhoFollowPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "friends.proto",
}
